// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardReceived extends ethereum.Event {
  get params(): RewardReceived__Params {
    return new RewardReceived__Params(this);
  }
}

export class RewardReceived__Params {
  _event: RewardReceived;

  constructor(event: RewardReceived) {
    this._event = event;
  }

  get keep(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpgradeFinalized extends ethereum.Event {
  get params(): UpgradeFinalized__Params {
    return new UpgradeFinalized__Params(this);
  }
}

export class UpgradeFinalized__Params {
  _event: UpgradeFinalized;

  constructor(event: UpgradeFinalized) {
    this._event = event;
  }

  get amountTransferred(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpgradeInitiated extends ethereum.Event {
  get params(): UpgradeInitiated__Params {
    return new UpgradeInitiated__Params(this);
  }
}

export class UpgradeInitiated__Params {
  _event: UpgradeInitiated;

  constructor(event: UpgradeInitiated) {
    this._event = event;
  }

  get newRewardsContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BeaconRewards extends ethereum.SmartContract {
  static bind(address: Address): BeaconRewards {
    return new BeaconRewards("BeaconRewards", address);
  }

  dispensedRewards(): BigInt {
    let result = super.call(
      "dispensedRewards",
      "dispensedRewards():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_dispensedRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dispensedRewards",
      "dispensedRewards():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eligibleButTerminated(_keep: Bytes): boolean {
    let result = super.call(
      "eligibleButTerminated",
      "eligibleButTerminated(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_keep)]
    );

    return result[0].toBoolean();
  }

  try_eligibleButTerminated(_keep: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "eligibleButTerminated",
      "eligibleButTerminated(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_keep)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  eligibleForReward(_keep: Bytes): boolean {
    let result = super.call(
      "eligibleForReward",
      "eligibleForReward(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_keep)]
    );

    return result[0].toBoolean();
  }

  try_eligibleForReward(_keep: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "eligibleForReward",
      "eligibleForReward(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_keep)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  eligibleForReward1(groupIndex: BigInt): boolean {
    let result = super.call(
      "eligibleForReward",
      "eligibleForReward(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(groupIndex)]
    );

    return result[0].toBoolean();
  }

  try_eligibleForReward1(groupIndex: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "eligibleForReward",
      "eligibleForReward(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(groupIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  endOf(interval: BigInt): BigInt {
    let result = super.call("endOf", "endOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(interval)
    ]);

    return result[0].toBigInt();
  }

  try_endOf(interval: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endOf", "endOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(interval)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  firstIntervalStart(): BigInt {
    let result = super.call(
      "firstIntervalStart",
      "firstIntervalStart():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_firstIntervalStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstIntervalStart",
      "firstIntervalStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  funded(): boolean {
    let result = super.call("funded", "funded():(bool)", []);

    return result[0].toBoolean();
  }

  try_funded(): ethereum.CallResult<boolean> {
    let result = super.tryCall("funded", "funded():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAllocatedRewards(interval: BigInt): BigInt {
    let result = super.call(
      "getAllocatedRewards",
      "getAllocatedRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(interval)]
    );

    return result[0].toBigInt();
  }

  try_getAllocatedRewards(interval: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAllocatedRewards",
      "getAllocatedRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(interval)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIntervalCount(): BigInt {
    let result = super.call(
      "getIntervalCount",
      "getIntervalCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getIntervalCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIntervalCount",
      "getIntervalCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIntervalWeight(interval: BigInt): BigInt {
    let result = super.call(
      "getIntervalWeight",
      "getIntervalWeight(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(interval)]
    );

    return result[0].toBigInt();
  }

  try_getIntervalWeight(interval: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIntervalWeight",
      "getIntervalWeight(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(interval)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  intervalKeepsProcessed(param0: BigInt): BigInt {
    let result = super.call(
      "intervalKeepsProcessed",
      "intervalKeepsProcessed(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_intervalKeepsProcessed(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "intervalKeepsProcessed",
      "intervalKeepsProcessed(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  intervalOf(timestamp: BigInt): BigInt {
    let result = super.call("intervalOf", "intervalOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(timestamp)
    ]);

    return result[0].toBigInt();
  }

  try_intervalOf(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("intervalOf", "intervalOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(timestamp)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  intervalWeights(param0: BigInt): BigInt {
    let result = super.call(
      "intervalWeights",
      "intervalWeights(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_intervalWeights(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "intervalWeights",
      "intervalWeights(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAllocated(interval: BigInt): boolean {
    let result = super.call("isAllocated", "isAllocated(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(interval)
    ]);

    return result[0].toBoolean();
  }

  try_isAllocated(interval: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAllocated", "isAllocated(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(interval)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFinished(interval: BigInt): boolean {
    let result = super.call("isFinished", "isFinished(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(interval)
    ]);

    return result[0].toBoolean();
  }

  try_isFinished(interval: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFinished", "isFinished(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(interval)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTerminated(groupIndex: BigInt): boolean {
    let result = super.call("isTerminated", "isTerminated(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(groupIndex)
    ]);

    return result[0].toBoolean();
  }

  try_isTerminated(groupIndex: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTerminated", "isTerminated(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(groupIndex)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keepsInInterval(interval: BigInt): BigInt {
    let result = super.call(
      "keepsInInterval",
      "keepsInInterval(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(interval)]
    );

    return result[0].toBigInt();
  }

  try_keepsInInterval(interval: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "keepsInInterval",
      "keepsInInterval(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(interval)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumKeepsPerInterval(): BigInt {
    let result = super.call(
      "minimumKeepsPerInterval",
      "minimumKeepsPerInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumKeepsPerInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumKeepsPerInterval",
      "minimumKeepsPerInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newRewardsContract(): Address {
    let result = super.call(
      "newRewardsContract",
      "newRewardsContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_newRewardsContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newRewardsContract",
      "newRewardsContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardClaimed(_keep: Bytes): boolean {
    let result = super.call("rewardClaimed", "rewardClaimed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_keep)
    ]);

    return result[0].toBoolean();
  }

  try_rewardClaimed(_keep: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rewardClaimed",
      "rewardClaimed(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_keep)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  startOf(interval: BigInt): BigInt {
    let result = super.call("startOf", "startOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(interval)
    ]);

    return result[0].toBigInt();
  }

  try_startOf(interval: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startOf", "startOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(interval)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  termLength(): BigInt {
    let result = super.call("termLength", "termLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_termLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("termLength", "termLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalRewards(): BigInt {
    let result = super.call("totalRewards", "totalRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRewards", "totalRewards():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unallocatedRewards(): BigInt {
    let result = super.call(
      "unallocatedRewards",
      "unallocatedRewards():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unallocatedRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unallocatedRewards",
      "unallocatedRewards():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  upgradeFinalizedTimestamp(): BigInt {
    let result = super.call(
      "upgradeFinalizedTimestamp",
      "upgradeFinalizedTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_upgradeFinalizedTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "upgradeFinalizedTimestamp",
      "upgradeFinalizedTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  upgradeInitiatedTimestamp(): BigInt {
    let result = super.call(
      "upgradeInitiatedTimestamp",
      "upgradeInitiatedTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_upgradeInitiatedTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "upgradeInitiatedTimestamp",
      "upgradeInitiatedTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _operatorContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stakingContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllocateRewardsCall extends ethereum.Call {
  get inputs(): AllocateRewardsCall__Inputs {
    return new AllocateRewardsCall__Inputs(this);
  }

  get outputs(): AllocateRewardsCall__Outputs {
    return new AllocateRewardsCall__Outputs(this);
  }
}

export class AllocateRewardsCall__Inputs {
  _call: AllocateRewardsCall;

  constructor(call: AllocateRewardsCall) {
    this._call = call;
  }

  get interval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AllocateRewardsCall__Outputs {
  _call: AllocateRewardsCall;

  constructor(call: AllocateRewardsCall) {
    this._call = call;
  }
}

export class FinalizeRewardsUpgradeCall extends ethereum.Call {
  get inputs(): FinalizeRewardsUpgradeCall__Inputs {
    return new FinalizeRewardsUpgradeCall__Inputs(this);
  }

  get outputs(): FinalizeRewardsUpgradeCall__Outputs {
    return new FinalizeRewardsUpgradeCall__Outputs(this);
  }
}

export class FinalizeRewardsUpgradeCall__Inputs {
  _call: FinalizeRewardsUpgradeCall;

  constructor(call: FinalizeRewardsUpgradeCall) {
    this._call = call;
  }
}

export class FinalizeRewardsUpgradeCall__Outputs {
  _call: FinalizeRewardsUpgradeCall;

  constructor(call: FinalizeRewardsUpgradeCall) {
    this._call = call;
  }
}

export class InitiateRewardsUpgradeCall extends ethereum.Call {
  get inputs(): InitiateRewardsUpgradeCall__Inputs {
    return new InitiateRewardsUpgradeCall__Inputs(this);
  }

  get outputs(): InitiateRewardsUpgradeCall__Outputs {
    return new InitiateRewardsUpgradeCall__Outputs(this);
  }
}

export class InitiateRewardsUpgradeCall__Inputs {
  _call: InitiateRewardsUpgradeCall;

  constructor(call: InitiateRewardsUpgradeCall) {
    this._call = call;
  }

  get _newRewardsContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitiateRewardsUpgradeCall__Outputs {
  _call: InitiateRewardsUpgradeCall;

  constructor(call: InitiateRewardsUpgradeCall) {
    this._call = call;
  }
}

export class KeepsInIntervalCall extends ethereum.Call {
  get inputs(): KeepsInIntervalCall__Inputs {
    return new KeepsInIntervalCall__Inputs(this);
  }

  get outputs(): KeepsInIntervalCall__Outputs {
    return new KeepsInIntervalCall__Outputs(this);
  }
}

export class KeepsInIntervalCall__Inputs {
  _call: KeepsInIntervalCall;

  constructor(call: KeepsInIntervalCall) {
    this._call = call;
  }

  get interval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class KeepsInIntervalCall__Outputs {
  _call: KeepsInIntervalCall;

  constructor(call: KeepsInIntervalCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MarkAsFundedCall extends ethereum.Call {
  get inputs(): MarkAsFundedCall__Inputs {
    return new MarkAsFundedCall__Inputs(this);
  }

  get outputs(): MarkAsFundedCall__Outputs {
    return new MarkAsFundedCall__Outputs(this);
  }
}

export class MarkAsFundedCall__Inputs {
  _call: MarkAsFundedCall;

  constructor(call: MarkAsFundedCall) {
    this._call = call;
  }
}

export class MarkAsFundedCall__Outputs {
  _call: MarkAsFundedCall;

  constructor(call: MarkAsFundedCall) {
    this._call = call;
  }
}

export class ReceiveApprovalCall extends ethereum.Call {
  get inputs(): ReceiveApprovalCall__Inputs {
    return new ReceiveApprovalCall__Inputs(this);
  }

  get outputs(): ReceiveApprovalCall__Outputs {
    return new ReceiveApprovalCall__Outputs(this);
  }
}

export class ReceiveApprovalCall__Inputs {
  _call: ReceiveApprovalCall;

  constructor(call: ReceiveApprovalCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ReceiveApprovalCall__Outputs {
  _call: ReceiveApprovalCall;

  constructor(call: ReceiveApprovalCall) {
    this._call = call;
  }
}

export class ReceiveRewardCall extends ethereum.Call {
  get inputs(): ReceiveRewardCall__Inputs {
    return new ReceiveRewardCall__Inputs(this);
  }

  get outputs(): ReceiveRewardCall__Outputs {
    return new ReceiveRewardCall__Outputs(this);
  }
}

export class ReceiveRewardCall__Inputs {
  _call: ReceiveRewardCall;

  constructor(call: ReceiveRewardCall) {
    this._call = call;
  }

  get keepIdentifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ReceiveRewardCall__Outputs {
  _call: ReceiveRewardCall;

  constructor(call: ReceiveRewardCall) {
    this._call = call;
  }
}

export class ReceiveReward1Call extends ethereum.Call {
  get inputs(): ReceiveReward1Call__Inputs {
    return new ReceiveReward1Call__Inputs(this);
  }

  get outputs(): ReceiveReward1Call__Outputs {
    return new ReceiveReward1Call__Outputs(this);
  }
}

export class ReceiveReward1Call__Inputs {
  _call: ReceiveReward1Call;

  constructor(call: ReceiveReward1Call) {
    this._call = call;
  }

  get groupIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReceiveReward1Call__Outputs {
  _call: ReceiveReward1Call;

  constructor(call: ReceiveReward1Call) {
    this._call = call;
  }
}

export class ReceiveRewardsCall extends ethereum.Call {
  get inputs(): ReceiveRewardsCall__Inputs {
    return new ReceiveRewardsCall__Inputs(this);
  }

  get outputs(): ReceiveRewardsCall__Outputs {
    return new ReceiveRewardsCall__Outputs(this);
  }
}

export class ReceiveRewardsCall__Inputs {
  _call: ReceiveRewardsCall;

  constructor(call: ReceiveRewardsCall) {
    this._call = call;
  }

  get keepIdentifiers(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class ReceiveRewardsCall__Outputs {
  _call: ReceiveRewardsCall;

  constructor(call: ReceiveRewardsCall) {
    this._call = call;
  }
}

export class ReceiveRewards1Call extends ethereum.Call {
  get inputs(): ReceiveRewards1Call__Inputs {
    return new ReceiveRewards1Call__Inputs(this);
  }

  get outputs(): ReceiveRewards1Call__Outputs {
    return new ReceiveRewards1Call__Outputs(this);
  }
}

export class ReceiveRewards1Call__Inputs {
  _call: ReceiveRewards1Call;

  constructor(call: ReceiveRewards1Call) {
    this._call = call;
  }

  get groupIndices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ReceiveRewards1Call__Outputs {
  _call: ReceiveRewards1Call;

  constructor(call: ReceiveRewards1Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReportTerminationCall extends ethereum.Call {
  get inputs(): ReportTerminationCall__Inputs {
    return new ReportTerminationCall__Inputs(this);
  }

  get outputs(): ReportTerminationCall__Outputs {
    return new ReportTerminationCall__Outputs(this);
  }
}

export class ReportTerminationCall__Inputs {
  _call: ReportTerminationCall;

  constructor(call: ReportTerminationCall) {
    this._call = call;
  }

  get keepIdentifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ReportTerminationCall__Outputs {
  _call: ReportTerminationCall;

  constructor(call: ReportTerminationCall) {
    this._call = call;
  }
}

export class ReportTermination1Call extends ethereum.Call {
  get inputs(): ReportTermination1Call__Inputs {
    return new ReportTermination1Call__Inputs(this);
  }

  get outputs(): ReportTermination1Call__Outputs {
    return new ReportTermination1Call__Outputs(this);
  }
}

export class ReportTermination1Call__Inputs {
  _call: ReportTermination1Call;

  constructor(call: ReportTermination1Call) {
    this._call = call;
  }

  get groupIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReportTermination1Call__Outputs {
  _call: ReportTermination1Call;

  constructor(call: ReportTermination1Call) {
    this._call = call;
  }
}

export class ReportTerminationsCall extends ethereum.Call {
  get inputs(): ReportTerminationsCall__Inputs {
    return new ReportTerminationsCall__Inputs(this);
  }

  get outputs(): ReportTerminationsCall__Outputs {
    return new ReportTerminationsCall__Outputs(this);
  }
}

export class ReportTerminationsCall__Inputs {
  _call: ReportTerminationsCall;

  constructor(call: ReportTerminationsCall) {
    this._call = call;
  }

  get groupIndices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ReportTerminationsCall__Outputs {
  _call: ReportTerminationsCall;

  constructor(call: ReportTerminationsCall) {
    this._call = call;
  }
}

export class ReportTerminations1Call extends ethereum.Call {
  get inputs(): ReportTerminations1Call__Inputs {
    return new ReportTerminations1Call__Inputs(this);
  }

  get outputs(): ReportTerminations1Call__Outputs {
    return new ReportTerminations1Call__Outputs(this);
  }
}

export class ReportTerminations1Call__Inputs {
  _call: ReportTerminations1Call;

  constructor(call: ReportTerminations1Call) {
    this._call = call;
  }

  get keepIdentifiers(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class ReportTerminations1Call__Outputs {
  _call: ReportTerminations1Call;

  constructor(call: ReportTerminations1Call) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
