// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakeCopied extends ethereum.Event {
  get params(): StakeCopied__Params {
    return new StakeCopied__Params(this);
  }
}

export class StakeCopied__Params {
  _event: StakeCopied;

  constructor(event: StakeCopied) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakePaidBack extends ethereum.Event {
  get params(): StakePaidBack__Params {
    return new StakePaidBack__Params(this);
  }
}

export class StakePaidBack__Params {
  _event: StakePaidBack;

  constructor(event: StakePaidBack) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokensWithdrawn extends ethereum.Event {
  get params(): TokensWithdrawn__Params {
    return new TokensWithdrawn__Params(this);
  }
}

export class TokensWithdrawn__Params {
  _event: TokensWithdrawn;

  constructor(event: TokensWithdrawn) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class StakingPortBacker__copiedStakesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class StakingPortBacker extends ethereum.SmartContract {
  static bind(address: Address): StakingPortBacker {
    return new StakingPortBacker("StakingPortBacker", address);
  }

  allowedOperators(param0: Address): boolean {
    let result = super.call(
      "allowedOperators",
      "allowedOperators(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_allowedOperators(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedOperators",
      "allowedOperators(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  copiedStakes(param0: Address): StakingPortBacker__copiedStakesResult {
    let result = super.call(
      "copiedStakes",
      "copiedStakes(address):(address,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new StakingPortBacker__copiedStakesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_copiedStakes(
    param0: Address
  ): ethereum.CallResult<StakingPortBacker__copiedStakesResult> {
    let result = super.tryCall(
      "copiedStakes",
      "copiedStakes(address):(address,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingPortBacker__copiedStakesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keepToken(): Address {
    let result = super.call("keepToken", "keepToken():(address)", []);

    return result[0].toAddress();
  }

  try_keepToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("keepToken", "keepToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxAllowedBackingDuration(): BigInt {
    let result = super.call(
      "maxAllowedBackingDuration",
      "maxAllowedBackingDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxAllowedBackingDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxAllowedBackingDuration",
      "maxAllowedBackingDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newStakingContract(): Address {
    let result = super.call(
      "newStakingContract",
      "newStakingContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_newStakingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newStakingContract",
      "newStakingContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oldStakingContract(): Address {
    let result = super.call(
      "oldStakingContract",
      "oldStakingContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_oldStakingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oldStakingContract",
      "oldStakingContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _keepToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenGrant(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _oldStakingContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _newStakingContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllowOperatorCall extends ethereum.Call {
  get inputs(): AllowOperatorCall__Inputs {
    return new AllowOperatorCall__Inputs(this);
  }

  get outputs(): AllowOperatorCall__Outputs {
    return new AllowOperatorCall__Outputs(this);
  }
}

export class AllowOperatorCall__Inputs {
  _call: AllowOperatorCall;

  constructor(call: AllowOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AllowOperatorCall__Outputs {
  _call: AllowOperatorCall;

  constructor(call: AllowOperatorCall) {
    this._call = call;
  }
}

export class AllowOperatorsCall extends ethereum.Call {
  get inputs(): AllowOperatorsCall__Inputs {
    return new AllowOperatorsCall__Inputs(this);
  }

  get outputs(): AllowOperatorsCall__Outputs {
    return new AllowOperatorsCall__Outputs(this);
  }
}

export class AllowOperatorsCall__Inputs {
  _call: AllowOperatorsCall;

  constructor(call: AllowOperatorsCall) {
    this._call = call;
  }

  get operators(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AllowOperatorsCall__Outputs {
  _call: AllowOperatorsCall;

  constructor(call: AllowOperatorsCall) {
    this._call = call;
  }
}

export class CopyStakeCall extends ethereum.Call {
  get inputs(): CopyStakeCall__Inputs {
    return new CopyStakeCall__Inputs(this);
  }

  get outputs(): CopyStakeCall__Outputs {
    return new CopyStakeCall__Outputs(this);
  }
}

export class CopyStakeCall__Inputs {
  _call: CopyStakeCall;

  constructor(call: CopyStakeCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CopyStakeCall__Outputs {
  _call: CopyStakeCall;

  constructor(call: CopyStakeCall) {
    this._call = call;
  }
}

export class ForceUndelegateCall extends ethereum.Call {
  get inputs(): ForceUndelegateCall__Inputs {
    return new ForceUndelegateCall__Inputs(this);
  }

  get outputs(): ForceUndelegateCall__Outputs {
    return new ForceUndelegateCall__Outputs(this);
  }
}

export class ForceUndelegateCall__Inputs {
  _call: ForceUndelegateCall;

  constructor(call: ForceUndelegateCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ForceUndelegateCall__Outputs {
  _call: ForceUndelegateCall;

  constructor(call: ForceUndelegateCall) {
    this._call = call;
  }
}

export class ReceiveApprovalCall extends ethereum.Call {
  get inputs(): ReceiveApprovalCall__Inputs {
    return new ReceiveApprovalCall__Inputs(this);
  }

  get outputs(): ReceiveApprovalCall__Outputs {
    return new ReceiveApprovalCall__Outputs(this);
  }
}

export class ReceiveApprovalCall__Inputs {
  _call: ReceiveApprovalCall;

  constructor(call: ReceiveApprovalCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get extraData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ReceiveApprovalCall__Outputs {
  _call: ReceiveApprovalCall;

  constructor(call: ReceiveApprovalCall) {
    this._call = call;
  }
}

export class RecoverStakeCall extends ethereum.Call {
  get inputs(): RecoverStakeCall__Inputs {
    return new RecoverStakeCall__Inputs(this);
  }

  get outputs(): RecoverStakeCall__Outputs {
    return new RecoverStakeCall__Outputs(this);
  }
}

export class RecoverStakeCall__Inputs {
  _call: RecoverStakeCall;

  constructor(call: RecoverStakeCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecoverStakeCall__Outputs {
  _call: RecoverStakeCall;

  constructor(call: RecoverStakeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UndelegateCall extends ethereum.Call {
  get inputs(): UndelegateCall__Inputs {
    return new UndelegateCall__Inputs(this);
  }

  get outputs(): UndelegateCall__Outputs {
    return new UndelegateCall__Outputs(this);
  }
}

export class UndelegateCall__Inputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UndelegateCall__Outputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
