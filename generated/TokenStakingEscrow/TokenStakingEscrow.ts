// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DepositRedelegated extends ethereum.Event {
  get params(): DepositRedelegated__Params {
    return new DepositRedelegated__Params(this);
  }
}

export class DepositRedelegated__Params {
  _event: DepositRedelegated;

  constructor(event: DepositRedelegated) {
    this._event = event;
  }

  get previousOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOperator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get grantId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositWithdrawn extends ethereum.Event {
  get params(): DepositWithdrawn__Params {
    return new DepositWithdrawn__Params(this);
  }
}

export class DepositWithdrawn__Params {
  _event: DepositWithdrawn;

  constructor(event: DepositWithdrawn) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get grantee(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get grantId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EscrowAuthorized extends ethereum.Event {
  get params(): EscrowAuthorized__Params {
    return new EscrowAuthorized__Params(this);
  }
}

export class EscrowAuthorized__Params {
  _event: EscrowAuthorized;

  constructor(event: EscrowAuthorized) {
    this._event = event;
  }

  get grantManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get escrow(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevokedDepositWithdrawn extends ethereum.Event {
  get params(): RevokedDepositWithdrawn__Params {
    return new RevokedDepositWithdrawn__Params(this);
  }
}

export class RevokedDepositWithdrawn__Params {
  _event: RevokedDepositWithdrawn;

  constructor(event: RevokedDepositWithdrawn) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get grantManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenStakingEscrow extends ethereum.SmartContract {
  static bind(address: Address): TokenStakingEscrow {
    return new TokenStakingEscrow("TokenStakingEscrow", address);
  }

  availableAmount(operator: Address): BigInt {
    let result = super.call(
      "availableAmount",
      "availableAmount(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBigInt();
  }

  try_availableAmount(operator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableAmount",
      "availableAmount(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositGrantId(operator: Address): BigInt {
    let result = super.call(
      "depositGrantId",
      "depositGrantId(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBigInt();
  }

  try_depositGrantId(operator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositGrantId",
      "depositGrantId(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositRedelegatedAmount(operator: Address): BigInt {
    let result = super.call(
      "depositRedelegatedAmount",
      "depositRedelegatedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBigInt();
  }

  try_depositRedelegatedAmount(operator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositRedelegatedAmount",
      "depositRedelegatedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositWithdrawnAmount(operator: Address): BigInt {
    let result = super.call(
      "depositWithdrawnAmount",
      "depositWithdrawnAmount(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBigInt();
  }

  try_depositWithdrawnAmount(operator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositWithdrawnAmount",
      "depositWithdrawnAmount(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositedAmount(operator: Address): BigInt {
    let result = super.call(
      "depositedAmount",
      "depositedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBigInt();
  }

  try_depositedAmount(operator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositedAmount",
      "depositedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getManagedGrantee(managedGrant: Address): Address {
    let result = super.call(
      "getManagedGrantee",
      "getManagedGrantee(address):(address)",
      [ethereum.Value.fromAddress(managedGrant)]
    );

    return result[0].toAddress();
  }

  try_getManagedGrantee(managedGrant: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getManagedGrantee",
      "getManagedGrantee(address):(address)",
      [ethereum.Value.fromAddress(managedGrant)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasDeposit(operator: Address): boolean {
    let result = super.call("hasDeposit", "hasDeposit(address):(bool)", [
      ethereum.Value.fromAddress(operator)
    ]);

    return result[0].toBoolean();
  }

  try_hasDeposit(operator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasDeposit", "hasDeposit(address):(bool)", [
      ethereum.Value.fromAddress(operator)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keepToken(): Address {
    let result = super.call("keepToken", "keepToken():(address)", []);

    return result[0].toAddress();
  }

  try_keepToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("keepToken", "keepToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenGrant(): Address {
    let result = super.call("tokenGrant", "tokenGrant():(address)", []);

    return result[0].toAddress();
  }

  try_tokenGrant(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenGrant", "tokenGrant():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawable(operator: Address): BigInt {
    let result = super.call("withdrawable", "withdrawable(address):(uint256)", [
      ethereum.Value.fromAddress(operator)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawable(operator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawable",
      "withdrawable(address):(uint256)",
      [ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _keepToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenGrant(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizeEscrowCall extends ethereum.Call {
  get inputs(): AuthorizeEscrowCall__Inputs {
    return new AuthorizeEscrowCall__Inputs(this);
  }

  get outputs(): AuthorizeEscrowCall__Outputs {
    return new AuthorizeEscrowCall__Outputs(this);
  }
}

export class AuthorizeEscrowCall__Inputs {
  _call: AuthorizeEscrowCall;

  constructor(call: AuthorizeEscrowCall) {
    this._call = call;
  }

  get anotherEscrow(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeEscrowCall__Outputs {
  _call: AuthorizeEscrowCall;

  constructor(call: AuthorizeEscrowCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receivingEscrow(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class ReceiveApprovalCall extends ethereum.Call {
  get inputs(): ReceiveApprovalCall__Inputs {
    return new ReceiveApprovalCall__Inputs(this);
  }

  get outputs(): ReceiveApprovalCall__Outputs {
    return new ReceiveApprovalCall__Outputs(this);
  }
}

export class ReceiveApprovalCall__Inputs {
  _call: ReceiveApprovalCall;

  constructor(call: ReceiveApprovalCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get extraData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ReceiveApprovalCall__Outputs {
  _call: ReceiveApprovalCall;

  constructor(call: ReceiveApprovalCall) {
    this._call = call;
  }
}

export class RedelegateCall extends ethereum.Call {
  get inputs(): RedelegateCall__Inputs {
    return new RedelegateCall__Inputs(this);
  }

  get outputs(): RedelegateCall__Outputs {
    return new RedelegateCall__Outputs(this);
  }
}

export class RedelegateCall__Inputs {
  _call: RedelegateCall;

  constructor(call: RedelegateCall) {
    this._call = call;
  }

  get previousOperator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get extraData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RedelegateCall__Outputs {
  _call: RedelegateCall;

  constructor(call: RedelegateCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawRevokedCall extends ethereum.Call {
  get inputs(): WithdrawRevokedCall__Inputs {
    return new WithdrawRevokedCall__Inputs(this);
  }

  get outputs(): WithdrawRevokedCall__Outputs {
    return new WithdrawRevokedCall__Outputs(this);
  }
}

export class WithdrawRevokedCall__Inputs {
  _call: WithdrawRevokedCall;

  constructor(call: WithdrawRevokedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawRevokedCall__Outputs {
  _call: WithdrawRevokedCall;

  constructor(call: WithdrawRevokedCall) {
    this._call = call;
  }
}

export class WithdrawToManagedGranteeCall extends ethereum.Call {
  get inputs(): WithdrawToManagedGranteeCall__Inputs {
    return new WithdrawToManagedGranteeCall__Inputs(this);
  }

  get outputs(): WithdrawToManagedGranteeCall__Outputs {
    return new WithdrawToManagedGranteeCall__Outputs(this);
  }
}

export class WithdrawToManagedGranteeCall__Inputs {
  _call: WithdrawToManagedGranteeCall;

  constructor(call: WithdrawToManagedGranteeCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawToManagedGranteeCall__Outputs {
  _call: WithdrawToManagedGranteeCall;

  constructor(call: WithdrawToManagedGranteeCall) {
    this._call = call;
  }
}
